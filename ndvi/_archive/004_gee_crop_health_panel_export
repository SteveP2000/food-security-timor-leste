// ===================================================================
// Per-ADM2 × Year Panel Exporter (memory-lean version, 0-band safe)
// NDVI/EVI AUCs (time-weighted), clear-weighted variants,
// harvest-window (Apr–Jul) means, and CHIRPS rainfall joins.
// Cloud mask: s2cloudless + SCL keep(4,5,6[,11])
// ===================================================================

// -------------------- CONFIG --------------------
var ADM2_ASSET = 'projects/ee-spenson/assets/food-security-timor-leste/LULC_Mean_Probability_Harvest_cropland_mask_adm2';

var START_YEAR     = 2019;
var END_YEAR       = 2025;
var YEARS          = ee.List.sequence(START_YEAR, END_YEAR);
var HARVEST_MONTHS = ee.List([4,5,6,7]);    // Apr–Jul
var CLD_PROB_THR   = 40;                    // s2cloudless threshold

// Include snow/ice = 11 (harmless in Timor; kept for consistency)
var KEEP_SCL_CODES = ee.List([4,5,6,11]);

// Export params
var EXPORT_FOLDER = 'EarthEngineExports_Panel';
var EXPORT_PREFIX = 'NDVI_EVI_AUC_panel_2019_2025';

// Scales
var IDX_SCALE   = 20;    // NDVI/EVI reductions
var CLEAR_SCALE = 100;   // CLEAR fraction reductions (coarser = cheaper)
var RAIN_SCALE  = 5566;  // ~0.05° for CHIRPS

// -------------------- INPUTS --------------------
var adm2FC = ee.FeatureCollection(ADM2_ASSET);

// Sentinel-2 SR + s2cloudless (preselect minimal bands)
var s2sr = ee.ImageCollection('COPERNICUS/S2_SR').select(['B8','B4','B2','SCL']);
var s2cp = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY').select('probability');

// CHIRPS daily precip (mm/day). We'll sum to monthly (mm)
var chirps = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY'); // band: 'precipitation'

// -------------------- HELPERS --------------------

// Join & mask *for a specific month window and geometry* (keeps graph small)
function s2MonthlyJoined(geom, startDate, endDate) {
  var s2sr_m = s2sr.filterBounds(geom).filterDate(startDate, endDate);
  var s2cp_m = s2cp.filterBounds(geom).filterDate(startDate, endDate);

  var joined = ee.ImageCollection(ee.Join.saveFirst('clouds').apply({
    primary: s2sr_m,
    secondary: s2cp_m,
    condition: ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
  })).filter(ee.Filter.notNull(['clouds']));

  function sclKeepMask(scl) {
    var init = ee.Image(0);
    return ee.Image(KEEP_SCL_CODES.iterate(function(c, acc){
      acc = ee.Image(acc);
      return acc.or(scl.eq(ee.Number(c)));
    }, init));
  }

  function addCloudProbAndMask(img) {
    var cld = ee.Image(img.get('clouds')).select('probability').rename('MSK_CLDPRB');
    var withProb = img.addBands(cld);
    var scl = withProb.select('SCL');
    var clearSCL  = sclKeepMask(scl);
    var clearProb = withProb.select('MSK_CLDPRB').lt(CLD_PROB_THR);
    var masked    = withProb.updateMask(clearSCL).updateMask(clearProb);
    var clear = ee.Image(1)
      .updateMask(masked.mask().reduce(ee.Reducer.min()))
      .rename('CLEAR');
    return masked.addBands(clear).select(['B8','B4','B2','CLEAR']);
  }

  return joined.map(addCloudProbAndMask);
}

// NDVI/EVI
function ndviFrom(img) {
  var nir = img.select('B8').multiply(0.0001);
  var red = img.select('B4').multiply(0.0001);
  return nir.subtract(red).divide(nir.add(red)).rename('NDVI');
}
function eviFrom(img) {
  var nir  = img.select('B8').multiply(0.0001);
  var red  = img.select('B4').multiply(0.0001);
  var blue = img.select('B2').multiply(0.0001);
  return nir.subtract(red).multiply(2.5)
            .divide(nir.add(red.multiply(6)).subtract(blue.multiply(7.5)).add(1))
            .rename('EVI');
}
function daysInMonth(d) {
  d = ee.Date(d);
  return d.advance(1, 'month').difference(d, 'day');
}

// Safe 0 for nulls (sums)
function safeZero(x){ return ee.Algorithms.If(ee.Algorithms.IsEqual(x, null), 0, x); }

// Region-mean of the *first* band; safely returns null for 0-band images
function meanOver(img, geom, scale) {
  var bnames = img.bandNames();
  return ee.Algorithms.If(
    ee.Number(bnames.size()).gt(0),
    ee.Dictionary(img.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: geom,
      scale: scale,
      maxPixels: 1e13,
      tileScale: 4,
      bestEffort: true
    })).get(ee.String(bnames.get(0))),
    null
  );
}

// -------------------- MONTHLY STATS (per ADM2, per month) --------------------
function monthlyStatsFor(adm2Feat, year) {
  var geom  = adm2Feat.geometry();
  var code  = adm2Feat.get('ADM2_PCODE');
  var name  = ee.Algorithms.If(adm2Feat.propertyNames().contains('ADM2_EN'),
                               adm2Feat.get('ADM2_EN'), null);

  var first  = ee.Date.fromYMD(year,1,1);
  var months = ee.List.sequence(0, 11).map(function(n){ return first.advance(n,'month'); });

  var monthFC = ee.FeatureCollection(months.map(function(d0){
    var d    = ee.Date(d0);
    var end  = d.advance(1,'month');
    var m    = d.get('month');
    var days = daysInMonth(d);

    // Build the S2 (joined & masked) only for this month & geometry
    var col  = s2MonthlyJoined(geom, d, end);
    var cnt  = col.size();

    // NDVI/EVI monthly composites, then region means
    var ndImg = col.map(ndviFrom).mean();
    var evImg = col.map(eviFrom).mean();

    var meanNDVI = ee.Algorithms.If(cnt.gt(0), meanOver(ndImg, geom, IDX_SCALE), null);
    var meanEVI  = ee.Algorithms.If(cnt.gt(0), meanOver(evImg, geom, IDX_SCALE), null);

    // CLEAR fraction: use monthly mean/max of CLEAR band (single reduction each)
    var clearMeanImg = col.select('CLEAR').map(function(i){ return i.unmask(0); }).mean();
    var clearMaxImg  = col.select('CLEAR').map(function(i){ return i.unmask(0); }).max();
    var clearFracMean = ee.Algorithms.If(cnt.gt(0), meanOver(clearMeanImg, geom, CLEAR_SCALE), 0);
    var clearFracMax  = ee.Algorithms.If(cnt.gt(0), meanOver(clearMaxImg,  geom, CLEAR_SCALE), 0);

    // CHIRPS rainfall (monthly sum → region mean). Band is 'precipitation'.
    // meanOver() is 0-band safe (returns null if CHIRPS has no images yet in future months)
    var rsum   = chirps.filterDate(d, end).sum();  // mm over month
    var rainMM = meanOver(rsum, geom, RAIN_SCALE);

    return ee.Feature(null, {
      'ADM2_PCODE': code,
      'ADM2_NAME':  name,
      'year':       year,
      'month':      m,
      'days':       days,
      'hasData':    cnt.gt(0),
      'mean_NDVI':  meanNDVI,          // may be null
      'mean_EVI':   meanEVI,           // may be null
      'clear_frac_mean': clearFracMean,
      'clear_frac_max':  clearFracMax,
      'rain_mm':    rainMM             // mm/month (region mean or null)
    });
  }));

  return monthFC;
}

// -------------------- AGGREGATE TO YEAR (per ADM2) --------------------
function aggregateYear(adm2Feat, year, monthFC) {
  var code = adm2Feat.get('ADM2_PCODE');
  var name = ee.Algorithms.If(adm2Feat.propertyNames().contains('ADM2_EN'),
                              adm2Feat.get('ADM2_EN'), null);

  var thisYear = monthFC.filter(ee.Filter.eq('year', year));

  // Lists (replace null index with 0 for AUC sums)
  var listNDVI = ee.List(thisYear.aggregate_array('mean_NDVI')).map(safeZero);
  var listEVI  = ee.List(thisYear.aggregate_array('mean_EVI')).map(safeZero);
  var listDays = ee.List(thisYear.aggregate_array('days'));
  var listCF   = ee.List(thisYear.aggregate_array('clear_frac_mean'));
  var listRain = ee.List(thisYear.aggregate_array('rain_mm')).map(safeZero);

  // AUC = sum(index * days)
  var AUC_NDVI = ee.List(listNDVI.zip(listDays))
    .map(function(z){ z = ee.List(z); return ee.Number(z.get(0)).multiply(ee.Number(z.get(1))); })
    .reduce(ee.Reducer.sum());
  var AUC_EVI  = ee.List(listEVI.zip(listDays))
    .map(function(z){ z = ee.List(z); return ee.Number(z.get(0)).multiply(ee.Number(z.get(1))); })
    .reduce(ee.Reducer.sum());

  // Clear-weighted AUCcw = sum(index * days * clearFracMean)
  var AUCcw_NDVI = ee.List(ee.List(listNDVI.zip(listDays)).zip(listCF))
    .map(function(z){
      z = ee.List(z);
      var nd_d = ee.List(z.get(0));
      var nd   = ee.Number(nd_d.get(0));
      var d    = ee.Number(nd_d.get(1));
      var cf   = ee.Number(z.get(1));
      return nd.multiply(d).multiply(cf);
    }).reduce(ee.Reducer.sum());
  var AUCcw_EVI = ee.List(ee.List(listEVI.zip(listDays)).zip(listCF))
    .map(function(z){
      z = ee.List(z);
      var ev_d = ee.List(z.get(0));
      var ev   = ee.Number(ev_d.get(0));
      var d    = ee.Number(ev_d.get(1));
      var cf   = ee.Number(z.get(1));
      return ev.multiply(d).multiply(cf);
    }).reduce(ee.Reducer.sum());

  // Harvest-window means
  var harv = thisYear.filter(ee.Filter.inList('month', HARVEST_MONTHS));
  var harv_mean_NDVI = harv.reduceColumns(ee.Reducer.mean(), ['mean_NDVI']).get('mean');
  var harv_mean_EVI  = harv.reduceColumns(ee.Reducer.mean(), ['mean_EVI']).get('mean');

  // Clear-weighted harvest means = mean(index * clearFrac), null-safe
  var harv_idx_cf_nd = harv.map(function(f){
    var v = ee.Number(f.get('mean_NDVI'));
    var cf= ee.Number(f.get('clear_frac_mean'));
    return f.set('nd_cf',
      ee.Algorithms.If(ee.Algorithms.IsEqual(v, null), null, v.multiply(cf))
    );
  });
  var harv_idx_cf_ev = harv.map(function(f){
    var v = ee.Number(f.get('mean_EVI'));
    var cf= ee.Number(f.get('clear_frac_mean'));
    return f.set('ev_cf',
      ee.Algorithms.If(ee.Algorithms.IsEqual(v, null), null, v.multiply(cf))
    );
  });
  var harv_mean_NDVI_cw = ee.FeatureCollection(harv_idx_cf_nd)
    .reduceColumns(ee.Reducer.mean(), ['nd_cf']).get('mean');
  var harv_mean_EVI_cw  = ee.FeatureCollection(harv_idx_cf_ev)
    .reduceColumns(ee.Reducer.mean(), ['ev_cf']).get('mean');

  // Rainfall totals (annual & harvest window)
  var rain_annual_mm = ee.List(listRain).reduce(ee.Reducer.sum());
  var rain_harv_mm   = harv.reduceColumns(ee.Reducer.sum(), ['rain_mm']).get('sum');

  // QA
  var months_with_obs      = thisYear.filter(ee.Filter.eq('hasData', true)).size();
  var harv_months_with_obs = harv.filter(ee.Filter.eq('hasData', true)).size();
  var avg_clear_frac_year  = thisYear.reduceColumns(ee.Reducer.mean(), ['clear_frac_mean']).get('mean');
  var avg_clear_frac_harv  = harv.reduceColumns(ee.Reducer.mean(), ['clear_frac_mean']).get('mean');

  return ee.Feature(null, {
    'ADM2_PCODE': code,
    'ADM2_NAME':  name,
    'year':       year,
    // AUCs
    'AUC_NDVI':   AUC_NDVI,
    'AUC_EVI':    AUC_EVI,
    'AUCcw_NDVI': AUCcw_NDVI,
    'AUCcw_EVI':  AUCcw_EVI,
    // Harvest-window means
    'harv_mean_NDVI':    harv_mean_NDVI,
    'harv_mean_EVI':     harv_mean_EVI,
    'harv_mean_NDVI_cw': harv_mean_NDVI_cw,
    'harv_mean_EVI_cw':  harv_mean_EVI_cw,
    // Rainfall (mm)
    'rain_annual_mm': rain_annual_mm,
    'rain_harv_mm':   rain_harv_mm,
    // QA
    'months_with_obs':      months_with_obs,
    'harv_months_with_obs': harv_months_with_obs,
    'avg_clear_frac_year':  avg_clear_frac_year,
    'avg_clear_frac_harv':  avg_clear_frac_harv
  });
}

// -------------------- PER-ADM2 EXPORT TASKS --------------------
var adm2List = adm2FC.toList(adm2FC.size());
var n = adm2List.size().getInfo();

for (var i = 0; i < n; i++) {
  var f    = ee.Feature(adm2List.get(i));
  var code = f.get('ADM2_PCODE').getInfo();

  // Build monthly table lazily (per year) to keep graphs smaller
  var monthly = ee.FeatureCollection(
    YEARS.map(function(y){
      return monthlyStatsFor(f, ee.Number(y));
    })
  ).flatten();

  var perYear = ee.FeatureCollection(
    YEARS.map(function(y){
      return aggregateYear(f, ee.Number(y), monthly);
    })
  );

  Export.table.toDrive({
    collection: perYear,
    description: EXPORT_PREFIX + '_' + code,
    fileNamePrefix: EXPORT_PREFIX + '_' + code,
    folder: EXPORT_FOLDER,
    fileFormat: 'CSV'
  });

  // (Optional) peek a few
  // print('Preview ' + code, perYear.limit(3));
}

// Optional: center map for quick sanity check
Map.centerObject(adm2FC, 8);
Map.addLayer(adm2FC.style({color: 'black', fillColor: '00000000'}), {}, 'ADM2');
